continue

object.first_name
object
exit
continue
object.elected.category
object.elected.catagory
object.elected
objeck.elected
object
obj
continue
@user_elected
@user_elected.update(user_elected_params)
user_elected_params
continue
user_elected_params
exit
params
@user_elected.update(params[:user_elected])
@user_elected
params[:user_elected]
exit
params[:user_elected]
params
@user_elected
continue
object
obj
continue
object
continue
self.user_accomplishments.ids.excludes(acc.id)
self.user_accomplishments.ids
acc
exit
!!self.user_accomplishments.includes(acc)
self.user_accomplishments.includes(acc)
acc
continue
self.user_accomplishments.includes(acc)
acc
!!self.user_accomplishments.includes(acc)
self.user_accomplishments.includes(acc)
continue
!!self.user_accomplishments.includes(acc)
self.user_accomplishments.includes(acc)
self.user_accomplishments.include(acc.id)
self.user_accomplishments.include(acc)
acc.id
acc
exit
self.user_accomplishments.pluck(:id)
self.user_accomplishments
continue
self.accomplishments
self.accomplisments
acc
!!self.accomplishments.includes(acc)
continue
!!self.accomplishments.includes(acc)
self.accomplishments.includes(acc)
self.accomplishments.includes(acc)?
acc
continue
self.accomplishments.includes(acc)
self.accomplishments.include(acc)
self.accomplishments
self
acc
continue
object
continue
accomplishment_params[:workshop]
accomplishment_params[:registered]
continue
@user.accomplishments
@user
UserAccomplishment.create(accomplishment: Accomplishment.find_by(name: "Attended workshop"), user: current_user)
UserAccomplishment.create(accomplishment: Accomplishment.find_by(name: "Attended workshop"), user: current_user))
UserAccomplishment.create(accomplishment: Accomplishment.find_by(name: "Attended workshop" , user: current_user))
current_user
continue
current_user
self
continue
accomplishment_params
continue
@user
continue
accomplishment_params
exit
accomplishment_params
accomplishment_params["bob"] = false
!!accomplishment_params[:workshop]
accomplishment_params[:workshop]
accomplishment_params[:workshop] = false
accomplishment_params[:workshop]
!!accomplishment_params[:workshop] = false
!!accomplishment_params[:workshop]
accomplishment_params[:workshop] == "true"
!!accomplishment_params[:workshop]
accomplishment_params[:workshop]
accomplishment_params[:workshop] == true
accomplishment_params[:workshop]?
accomplishment_params[:workshop]
accomplishment_params[:workshp]
accomplishment_params
continue
@user.user_accomplishments
@user.user_accomplishments.build(accomplishment_params)
@user.user_accomplishments
accomplishment_params
@user
continue
@user
user_params
user-params
params[:user]
params
continue
params
continue
f.label
f
@user
current_user
curent_user
exit
@accomplishment.save?
@accomplishment.valid?
@accomplishment.valid
@accomplishment
continue
@accomplishment = current_user.build_user_accomplishment(accomplishment_params)
@accomplishment
continue
params[:user_accomplishment]
current_user.build_user_accomplishment
current_user.user_accomplishment.build
current_user.user_accomplishment
current_user.methods.user_accomplishment
current_user.methods.sort
current_user.methods
user.methods
current_user.UserAccomplishment.build
current_user
params[:user_accomplishment]
params
continue
params[:user_accomplishment]
params
continue
conitnue
message
flash
notice
continue
flash
notice
continue
render :new, notice: "Email or password is invalid"
continue
notice
continue
coninue
notice
continue
User.find(session[:user_id])
session[:user_id]
session
@curent_user
continue
exit
@user.first_name
@user.firt_name
@user
@user = User.find(params[:id])
params[:id]
params
continue
user && user.authenticate(params[:password])
user = User.find_by_email(params[:email])
params
continue
params[:user]
params
